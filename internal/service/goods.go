package service

import (
	"encoding/json"
	"github.com/qauzy/mynahs/internal/dto"
	"github.com/qauzy/mynahs/internal/model"
	"github.com/qauzy/mynahs/internal/pkg/errors"
	"io"
	"net/http"
)

type AutoGenerated struct {
	Code int            `json:"code"`
	Msg  string         `json:"msg"`
	Data model.GoodBean `json:"data"`
}

type GoodsService struct {
}

func NewGoodsService() *GoodsService {
	return &GoodsService{}
}

// 建立商品信息
func (Goods *GoodsService) GoodsList(p *dto.Page) (list []*model.Goods, err error) {
	// 查询数据库中是否存在商品信息
	goodsodel := model.NewGoods()
	list, err = goodsodel.GetGoodsList(p)
	return
}

func (Goods *GoodsService) Check(barcode string) (goods *model.Goods, err error) {
	// 查询数据库中是否存在商品信息
	goodsodel := model.NewGoods()
	goods = goodsodel.GetGoods(barcode)
	if goods != nil {
		return goods, nil
	}

	// 不存在则从国家物品编码中心获取
	var resp *http.Response
	resp, err = http.Get("https://www.mxnzp.com/api/barcode/goods/details?app_id=pcf0owtplsld1tlk&app_secret=VHI1dGxFZE1OOU16OFRVeS8yWEhFZz09&barcode=" + barcode)
	if err != nil {
		return
	}
	defer resp.Body.Close()

	var b []byte
	b, err = io.ReadAll(resp.Body)
	if err != nil {
		return
	}

	var goodsdData AutoGenerated
	err = json.Unmarshal(b, &goodsdData)
	if err != nil {
		return
	}

	if goodsdData.Code != 1 {
		err = errors.NewBusinessError(errors.GoodsDoesNotExist, goodsdData.Msg)
		return
	}

	goods = model.NewGoodsEx(goodsdData.Data.GoodsName, goodsdData.Data.Barcode, goodsdData.Data.Brand, "", goodsdData.Data.Standard, goodsdData.Data.Supplier)

	//注册商品信息到数据库
	err = goods.Register()
	if err != nil {
		return
	}

	return
}

// 修改商品价格
func (Goods *GoodsService) UpdatePrice(barcode string, price string) (err error) {
	// 查询数据库中是否存在商品信息
	goodsodel := model.NewGoods()
	goods := goodsodel.GetGoods(barcode)

	if goods == nil {
		err = errors.NewBusinessError(errors.GoodsDoesNotExist, "商品不存在")
		return
	}
	err = goods.UpdatePrice(price)
	if goods == nil {
		err = errors.NewBusinessError(errors.ServerError, "价格更新失败")
		return
	}
	return
}

// 更新商品信息
func (goodsService *GoodsService) Update(data *model.GoodBean) (result *model.GoodBean, err error) {
	// 查询数据库中是否存在商品信息
	goodsodel := model.NewGoods()
	goods := goodsodel.GetGoods(data.Barcode)
	if err != nil || goods == nil {
		//err = errors.NewBusinessError(errors.GoodsDoesNotExist, "商品不存在")
		return goodsService.CreateGoods(data)
	}
	goods.GoodsName = data.GoodsName
	goods.Supplier = data.Supplier
	goods.Price = data.Price
	goods.Spec = data.Spec
	err = goods.Update()
	if goods == nil {
		err = errors.NewBusinessError(errors.ServerError, "信息更新失败")
		return
	}

	//包装返回数据
	result = &model.GoodBean{
		Position:  data.Position, //指示信息的位置
		ID:        goods.ID,
		GoodsName: goods.GoodsName,
		Barcode:   goods.Barcode,
		Price:     goods.Price,
		Brand:     goods.Brand,
		Supplier:  goods.Supplier,
		Standard:  goods.Spec, //为了兼容，后面去掉
		Spec:      goods.Spec,
	}
	return
}

// 建立商品信息
func (Goods *GoodsService) CreateGoods(data *model.GoodBean) (result *model.GoodBean, err error) {
	// 查询数据库中是否存在商品信息
	goods := model.NewGoods()
	goods.Barcode = data.Barcode
	goods.GoodsName = data.GoodsName
	goods.Supplier = data.Supplier
	goods.Price = data.Price
	goods.Spec = data.Spec
	err = goods.Register()
	if err != nil {
		return
	}

	//包装返回数据
	result = &model.GoodBean{
		Position:  data.Position, //指示信息的位置
		ID:        goods.ID,
		GoodsName: goods.GoodsName,
		Barcode:   goods.Barcode,
		Price:     goods.Price,
		Brand:     goods.Brand,
		Supplier:  goods.Supplier,
		Standard:  goods.Spec, //为了兼容，后面去掉
		Spec:      goods.Spec,
	}
	return
}
