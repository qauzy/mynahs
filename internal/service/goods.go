package service

import (
	"encoding/json"
	"github.com/zzpu/mynahs/internal/model"
	"github.com/zzpu/mynahs/internal/pkg/errors"
	"io"
	"net/http"
)

type AutoGenerated struct {
	Code int    `json:"code"`
	Msg  string `json:"msg"`
	Data struct {
		GoodsName string `json:"goodsName"`
		Barcode   string `json:"barcode"`
		Price     string `json:"price"`
		Brand     string `json:"brand"`
		Supplier  string `json:"supplier"`
		Standard  string `json:"standard"`
	} `json:"data"`
}
type GoodsService struct {
}

func NewGoodsService() *GoodsService {
	return &GoodsService{}
}

// 建立商品信息
func (Goods *GoodsService) GoodsList(p *model.Page) (list []*model.Goods, err error) {
	// 查询数据库中是否存在商品信息
	goodsodel := model.NewGoods()
	list, err = goodsodel.GetGoodsList(p)
	return
}

func (Goods *GoodsService) Check(barcode string) (goods *model.Goods, err error) {
	// 查询数据库中是否存在商品信息
	goodsodel := model.NewGoods()
	goods = goodsodel.GetGoods(barcode)
	if goods != nil {
		return goods, nil
	}

	// 不存在则从国家物品编码中心获取
	var resp *http.Response
	resp, err = http.Get("https://www.mxnzp.com/api/barcode/goods/details?app_id=pcf0owtplsld1tlk&app_secret=VHI1dGxFZE1OOU16OFRVeS8yWEhFZz09&barcode=" + barcode)
	if err != nil {
		return
	}
	defer resp.Body.Close()

	var b []byte
	b, err = io.ReadAll(resp.Body)
	if err != nil {
		return
	}

	var goodsdData AutoGenerated
	err = json.Unmarshal(b, &goodsdData)
	if err != nil {
		return
	}

	if goodsdData.Code != 1 {
		err = errors.NewBusinessError(errors.GoodsDoesNotExist, goodsdData.Msg)
		return
	}

	goods = model.NewGoodsEx(goodsdData.Data.GoodsName, goodsdData.Data.Barcode, goodsdData.Data.Brand, "", goodsdData.Data.Standard, goodsdData.Data.Supplier)

	//注册商品信息到数据库
	err = goods.Register()
	if err != nil {
		return
	}

	return
}

// 修改商品价格
func (Goods *GoodsService) UpdatePrice(barcode string, price string) (*model.Goods, error) {
	// 查询数据库中是否存在商品信息
	goodsodel := model.NewGoods()
	goods := goodsodel.GetGoods(barcode)

	if goods == nil {
		return goods, nil
	}

	// 不存在则从国家物品编码中心获取
	/* TODO 生成 token 等业务逻辑，此处不再演示，直接返回用户信息 */
	// ...

	return nil, nil
}

// 建立商品信息
func (Goods *GoodsService) CreateGoods(good *model.Goods) error {
	// 查询数据库中是否存在商品信息
	goodsodel := model.NewGoods()
	goods := goodsodel.GetGoods(good.Barcode)

	if goods != nil {
		return nil
	}

	// 不存在则从国家物品编码中心获取
	/* TODO 生成 token 等业务逻辑，此处不再演示，直接返回用户信息 */
	// ...

	return nil
}
